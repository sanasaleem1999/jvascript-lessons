WEBVTT
Kind: captions
Language: ar

00:00:00.000 --> 00:00:03.520
الفئات في JavaScript، ماذا تعني في رأيك؟

00:00:03.520 --> 00:00:05.939
أعتقد إنها أمر رائع. أعني أنها مربكة قليلًا

00:00:05.940 --> 00:00:08.359
إذا كنت تفكر في كيفية عمل الفئات في اللغات الأخرى،

00:00:08.359 --> 00:00:10.349
لكن المفهوم العام هو نفسه.

00:00:10.349 --> 00:00:12.359
هلا وضحت ذلك قليلًا؟

00:00:12.359 --> 00:00:14.219
حسنًا، في اللغات الأخرى،

00:00:14.220 --> 00:00:17.940
نستخدم الفئات في إنشاء الكائنات وتوفير الخصائص
المكتسبة.

00:00:17.940 --> 00:00:20.798
لكنك تقول أن هذا الأمر لا يحدث في JavaScript؟

00:00:20.798 --> 00:00:23.278
ليس بالضبط. في JavaScript،

00:00:23.278 --> 00:00:25.410
نستخدم الدوال لإنشاء الكائنات.

00:00:25.410 --> 00:00:28.844
عندما ننشئ حلوى جديدة مثل هذه،

00:00:28.844 --> 00:00:31.070
فإن الحلوى تكون دالة عادية فحسب.

00:00:31.070 --> 00:00:34.125
حسنًا. وتحدث القدرة على اكتساب البيانات

00:00:34.125 --> 00:00:37.530
والوظيفة في لغة JavaScript من خلال الاكتساب
النمطي.

00:00:37.530 --> 00:00:42.359
بالضبط. ونظرًا لأن ECMAScript يقدم لنا كلمات أساسية
جديدة مثل الفئة،

00:00:42.359 --> 00:00:47.320
والعليا، والممتدة، لا يعني ذلك أن الطريقة الكاملة
التي تعمل بها اللغة قد تغيرت.

00:00:47.320 --> 00:00:51.405
لكن لغة JavaScript لا تزال تستخدم الدوال والاكتساب
النمطي.

00:00:51.405 --> 00:00:54.630
لدينا الآن وسيلة جديدة أفضل لكتابة الوظيفة نفسها،
أليس كذلك؟

00:00:54.630 --> 00:00:56.925
لقد فهمت. لكن ضعوا في اعتباركم

00:00:56.924 --> 00:01:00.265
أن الوظيفة المهمة للغة لم تتغير.

00:01:00.265 --> 00:01:04.549
حسنًا. لذلك فإن JavaScript ليست إحدى اللغات التي
تقوم على فئة.

00:01:04.549 --> 00:01:09.155
فهي تستخدم الدوال لإنشاء الكائنات وتربطها معًا عن
طريق الاكتساب النمطي.

00:01:09.155 --> 00:01:10.920
أجل. إن فئات JavaScript

00:01:10.920 --> 00:01:15.730
ليست إلا شيء وهمي عن الدوال العادية والاكتساب
النمطي.

